if &compatible
  set nocompatible
endif

" basics
set encoding=utf-8
set mouse=r
set ruler
set number
set title

" sometimes when switching open buffers I lose syntax highlighting and set
" hidden somehow fixes that
set hidden

" whitespace
set nowrap
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set list listchars=tab:\ \ ,trail:·

" for wrapper things like markdown
command! -nargs=* Wrap set wrap linebreak nolist

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" searching
set hlsearch
set incsearch
set ignorecase
set smartcase
nnoremap <cr> :nohlsearch<cr>

" statusbar
set laststatus=2
set showcmd

" don't show press ENTER…
set shortmess=a
set cmdheight=2

" tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,target,_build,deps

" remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" I must have this shortcut for hash rockets
imap <C-l> <Space>=><Space>

" reload externally modified files
set autoread

" If plug isn't installed, then install it
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

Plug 'sheerun/vim-polyglot' " lots of languages
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag' " HTML tags
Plug 'tpope/vim-fugitive' " git support
Plug 'tpope/vim-rhubarb' " github support for vim-fugitive
Plug 'tomtom/tcomment_vim' " gc
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'b4b4r07/vim-hcl'
Plug 'jph00/swift-apple'

" line stuff up
Plug 'tommcdo/vim-lion'
  let g:lion_squeeze_spaces = 1

Plug 'fatih/vim-go'
  let g:go_def_mode='gopls'
  let g:go_info_mode='gopls'

Plug 'mileszs/ack.vim'
  " ack.vim should use ripgrep
  if executable("rg")
    let g:ackprg = 'rg --vimgrep --no-heading'
  endif

Plug 'mattn/gist-vim'
  let g:gist_open_browser_after_post = 1
  let g:gist_detect_filetype = 2
  let g:gist_post_private = 1
  if has('macunix')
    let g:gist_clip_command = 'pbcopy'
  endif

Plug 'myobie/vim-elixirls', { 'do': ':ElixirLsCompileSync' }

Plug 'dense-analysis/ale'
  let g:ale_completion_enabled = 1

  " move to the next ALE warning / error
  nnoremap ]r :ALENextWrap<CR>
  " move to the previous ALE warning / error
  nnoremap [r :ALEPreviousWrap<CR>

  " TODO
  " * css
  " * markdown
  " * ruby
  " * sql
  " * text
  " * typescript
  " * yaml

  let g:ale_linters = {
  \  'sh': ['language_server', 'shell'],
  \  'elixir': ['elixir-ls'],
  \  'html': ['tidy'],
  \  'javascript': ['standard', 'tsserver'],
  \  'json': ['jsonlint'],
  \  'go': ['gofmt', 'gobuild', 'gopls'],
  \  'rust': ['rls', 'rustc']
  \}

  let g:ale_fixers = {
  \  'sh': ['shfmt'],
  \  'elixir': ['mix_format'],
  \  'javascript': ['prettier-standard'],
  \  'json': ['jq'],
  \  'typescript': ['prettier', 'tslint'],
  \  'terraform': ['terraform'],
  \  'go': ['gofmt', 'gomod'],
  \}

  noremap <leader>h :ALEHover<CR>
  noremap <leader>re :ALERename<CR>
  noremap <leader>n :ALENextWrap<CR>
  noremap <leader>] :ALEGoToDefinition<CR>
  noremap <leader>\ :ALEFindReferences<CR>

  " Use Google's style for shell files
  let g:ale_sh_shfmt_options = '-i 2 -ci'
  " Use the elixir-ls compiled by vim-elixirls
  let g:ale_elixir_elixir_ls_release = expand('~/.vim/plugged/vim-elixirls/elixir-ls/release/')
  " There is currently a problem when first launching the elixir language server
  " that ALE warns that 'using List as String' which is super annoying
  let g:ale_elixir_elixir_ls_config = {'elixirLS': {'dialyzerEnabled': v:true}}
  let g:ale_rust_rls_toolchain = 'stable'

  let g:ale_linters_explicit = 1
  let g:ale_fix_on_save = 1
  let g:ale_completion_enabled = 0

" I like asyncomplete better than ALE's completion, ALE's seems jittery and
" shows the info window too often
Plug 'prabirshrestha/asyncomplete.vim'
  " Use ALE's function for asyncomplete defaults
  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
      \ 'priority': 10,
      \ }))

  inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
  inoremap <expr> <C-y>   pumvisible() ? asyncomplete#close_popup() : "\<C-y>"
  inoremap <expr> <C-e>   pumvisible() ? asyncomplete#cancel_popup() : "\<C-e>"
  set completeopt+=preview
  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
  nnoremap <silent> <leader>t :FZF<cr>
  augroup localfzf
    au FileType fzf :tnoremap <buffer> <c-j> <c-j>
    au FileType fzf :tnoremap <buffer> <c-k> <c-k>
  augroup END

call plug#end()

" font and colors
" set background=dark
" color default
syntax on
set ttyfast
set ttimeoutlen=10

" ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

" go
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist

" swfit
autocmd FileType swift setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist

" js
autocmd BufNewFile,BufRead *.js set ft=javascript
autocmd BufNewFile,BufRead *.json set ft=json

" elixir scripts
autocmd BufNewFile,BufRead *.exs set ft=elixir

" markdown
autocmd FileType markdown setlocal wrap linebreak

" terminal
autocmd TerminalOpen * setlocal nonumber norelativenumber

lang en_US
