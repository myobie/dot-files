if &compatible
  set nocompatible
endif

" basics
set encoding=utf-8
set ruler
set number
set title

noremap <leader>r :redraw!<CR>

if has("mouse")
  set mouse=a
  set sidescroll=1
  set ttymouse=sgr
endif

" sometimes when switching open buffers I lose syntax highlighting and set
" hidden somehow fixes that
set hidden

" whitespace
set nowrap
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set list listchars=tab:\ \ ,trail:·

" for wrapper things like markdown
command! -nargs=* Wrap set wrap linebreak nolist

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" searching
set hlsearch
set incsearch
set ignorecase
set smartcase
nnoremap <cr> :nohlsearch<cr>

" statusbar
set laststatus=2
set showcmd

" don't show press ENTER…
set shortmess=a
set cmdheight=1

" spellcheck
let g:lexical#spelllang = ['en_us',]
command Sp setlocal spell
command Spoff setlocal nospell

" tab completion
" set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,target,_build,deps

" remember last location in file
if has("autocmd")
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
endif

" directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" I must have this shortcut for hash rockets
imap <C-l> <Space>=><Space>

" reload externally modified files
set autoread

" plug
call plug#begin()

Plug 'sheerun/vim-polyglot' " lots of languages
let g:javascript_plugin_jsdoc = 1 " highlight jsdocs
set re=0 " Use the latest regular expressions
let g:polyglot_disabled = ['yats.plugin']

Plug 'HerringtonDarkholme/yats.vim' " the latest yats has something polyglot doens't have yet

Plug 'kana/vim-textobj-user'
Plug 'reedes/vim-textobj-quote'
augroup textobj_quote
  autocmd!
  autocmd FileType markdown call textobj#quote#init()
  autocmd FileType textile call textobj#quote#init()
  autocmd FileType text call textobj#quote#init({'educate': 0})
augroup END

map <silent> <leader>qc <Plug>ReplaceWithCurly
map <silent> <leader>qs <Plug>ReplaceWithStraight

Plug 'christoomey/vim-titlecase'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag' " HTML tags
Plug 'tpope/vim-fugitive' " git support
Plug 'tpope/vim-rhubarb' " github support for vim-fugitive
Plug 'tpope/vim-dadbod' " DB console
Plug 'tpope/vim-eunuch' " Unix utilities like :SudoWrite
Plug 'tomtom/tcomment_vim' " gc
Plug 'jonsmithers/vim-html-template-literals'
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'b4b4r07/vim-hcl'
Plug 'jph00/swift-apple'
Plug 'embear/vim-localvimrc'

" File explorer
Plug 'preservim/nerdtree'
  " Exit if NERDTree is the only window left
  autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" line stuff up
Plug 'tommcdo/vim-lion'
  let g:lion_squeeze_spaces = 1

Plug 'fatih/vim-go'
  let g:go_def_mode='gopls'
  let g:go_info_mode='gopls'

Plug 'mileszs/ack.vim'
  " ack.vim should use ripgrep
  if executable("rg")
    let g:ackprg = 'rg --vimgrep --no-heading'
  endif

Plug 'mattn/gist-vim'
  let g:gist_open_browser_after_post = 1
  let g:gist_detect_filetype = 2
  let g:gist_post_private = 1
  if has('macunix')
    let g:gist_clip_command = 'pbcopy'
  endif

Plug 'prabirshrestha/vim-lsp'
  " let g:lsp_log_verbose = 1
  " let g:lsp_log_file = expand('~/vim-lsp.log')

Plug 'rhysd/vim-healthcheck'
  " provides a health check for vim-lsp

Plug 'mattn/vim-lsp-settings'
  let g:lsp_diagnostics_virtual_text_enabled = 0
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_format_sync_timeout = 1000

  autocmd! BufWritePre *.ex  call execute('LspDocumentFormatSync')
  autocmd! BufWritePre *.exs call execute('LspDocumentFormatSync')
  autocmd! BufWritePre *.rs  call execute('LspDocumentFormatSync')
  autocmd! BufWritePre *.tf  call execute('LspDocumentFormatSync')
  autocmd! BufWritePre *.go  call execute('LspDocumentFormatSync')

  noremap [n :LspPreviousDiagnostic<CR>
  noremap ]n :LspNextDiagnostic<CR>
  noremap <leader>h :LspHover<CR>
  noremap K :LspHover<CR>
  noremap <leader>re :LspRename<CR>
  noremap <leader>] :LspDefinition<CR>
  noremap gd :LspDefinition<CR>
  noremap <leader>\ :LspReferences<CR>
  noremap <leader>a :LspCodeAction<CR>

Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
  inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

Plug 'vim-autoformat/vim-autoformat'
  autocmd! BufWritePre *.js   call execute('Autoformat')
  autocmd! BufWritePre *.jsx  call execute('Autoformat')
  autocmd! BufWritePre *.ts   call execute('Autoformat')
  autocmd! BufWritePre *.tsx  call execute('Autoformat')
  autocmd! BufWritePre *.json call execute('Autoformat')
  autocmd! BufWritePre *.css  call execute('Autoformat')
  autocmd! BufWritePre *.sh   call execute('Autoformat')
  autocmd! BufWritePre sh     call execute('Autoformat')

  let g:formatters = []
  let g:formatters_vim = []

  let g:formatdef_shfmt = '"shfmt -i 2 -ci -filename ".@%." -"'
  let g:formatters_sh = ['shfmt']
  let g:formatters_bash = ['shfmt']

  let g:formatdef_dprint = '"dprint fmt --stdin ".@%'
  let g:formatters_javascript = ['dprint']
  let g:formatters_typescript = ['dprint']
  let g:formatters_typescriptreact = ['dprint']
  let g:formatters_json = ['dprint']
  let g:formatters_css = ['dprint']

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
  nnoremap <silent> <leader>t :FZF<cr>
  nnoremap <silent> <leader>b :Buffers<cr>

Plug 'rizzatti/dash.vim'

call plug#end()

" font and colors
syntax on
set ttyfast
set ttimeoutlen=10

set background=dark

hi CursorLine term=bold,underline cterm=bold,underline gui=bold,underline ctermbg=0 guibg=#222e33
hi CursorLineNr term=bold cterm=None

" go
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist

" swift
autocmd FileType swift setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist

" js
autocmd BufNewFile,BufRead *.js set ft=javascript
autocmd BufNewFile,BufRead *.ts set ft=typescript
autocmd BufNewFile,BufRead *.jsx set ft=typescriptreact
autocmd BufNewFile,BufRead *.tsx set ft=typescriptreact
autocmd BufNewFile,BufRead *.json set ft=json

" terraform
autocmd BufNewFile,BufRead *.tf set ft=terraform

" elixir scripts
autocmd BufNewFile,BufRead *.exs set ft=elixir

" markdown
autocmd FileType markdown setlocal wrap linebreak

" terminal
autocmd TerminalWinOpen * setlocal nonumber norelativenumber

lang en_US
